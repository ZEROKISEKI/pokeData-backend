import http from 'http'
import pbjs from 'protobufjs/cli/pbjs'
import ora from 'ora'
import {proto} from '../config'
import rm from 'rimraf'
// import cluster from 'cluster'

import app from '../app'
import path from 'path'

const server = http.createServer(app.callback())
const spinner1 = ora('remove proto model...\n').start()

rm(path.join(__dirname, 'common/model.js'), err => {
  if (err) {
    spinner1.fail('remove proto failed!\n')
  } else {
    spinner1.succeed('remove proto success!\n')
    const spinner = ora('building proto model...\n').start()
    pbjs.main(...proto, (err, output) => {
      if (err) spinner.fail('building proto failed! check your *.proto file!\n')
      else {
        spinner.succeed('build proto model success!\n')
        server.listen(3006)
      }
    })
  }
})


export default server

/* if (cluster.isMaster) {
  const chokidar = require('chokidar')
  const path = require('path')
  const Koa = require('koa')
  const app = new Koa()

  // 开发环境和生产环境引用资源区别
  if (app.env === 'development') {

    if (typeof process.env.NODE_ENV === 'undefined') {
      process.env.NODE_ENV = 'development'
    }

    const webpack = require('webpack')
    const { devMiddleware, hotMiddleware } = require('koa-webpack-middleware')
    const webpackConfig = require('../build/webpack.dev.conf')

    const compiler = webpack(webpackConfig)

    app.use(devMiddleware(compiler, {
      publicPath: '/static',
      quiet: true
    }))

    app.use(hotMiddleware(compiler, {
      log: false
    }))

    // 子进程负责NodeJS服务端
    let worker = cluster.fork()
    chokidar.watch(['common/jwt.js', 'common/mongodb.js',
      'controllers', 'utils', 'middlewares', 'models',
      'routers', 'tests/controllers', 'config.js', 'app.js', 'bin'
    ]).on('change', path => {
      console.log(`${path} changed!`)
      worker && worker.kill()
      // 文件改变时重新生成进程
      worker = cluster.fork()
    })

    compiler.plugin('after-emit', (compilation, callback) => {
      const filePath = path.join(compiler.outputPath, 'page.html')
      const result = compiler.outputFileSystem.readFileSync(filePath) + '';
      callback()
    })

    cluster.on('message', (worker, msg) => {
      const fileName = msg.fileName;
      try {
        const filePath = path.join(compiler.outputPath, fileName);
        const content = compiler.outputFileSystem.readFileSync(filePath).toString();
        worker.send({ fileName, content });
      } catch (e) {
        console.log(`read file ${fileName} error`, e.toString());
      }
    })
  }

} else if (cluster.isWorker) {
  const app = require('../app')

  // 复写render方法
  app.context.render = (fileName) => {
    return new Promise((resolve, reject) =>{
      process.send({ fileName });
      process.on('message', (msg) =>{
        resolve(msg.content);
      });
    });
  }

  const server = http.createServer(app.callback())
  const spinner = ora('building proto model...\n').start()

  pbjs.main(...proto, (err, output) => {
    if (err) spinner.fail('building proto failed! check your *.proto file!\n')
    else {
      spinner.succeed('build proto model success!\n')
      server.listen(3006)
    }
  })
}*/